{"ast":null,"code":"var _jsxFileName = \"/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/components/PokeCard/PokeCard.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PokeHijo from \"./PokeHijo\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Swal from \"sweetalert2\"; //Este componente es llamado desde App.js, por tanto, en App.js se mostrará todo lo que contenga este componente en su return. Además, en este componente se llama al componente PokeHijo por lo que todo lo que contenga dicho componente también aparecerá en App.js pasando de hijo a padre.\n//En App.js se muestran los botones Descubre pokemons, cerrar sesión, este componente (pokecard) y la frase del token (bien o mal). En este componente, he llamado a las props de pokemon (es decir, toda la información de los pokemons) que las recojo entre paréntesis y en la constante pokemon. Después, me he traido la función newPokemon para que el usuario logueado añada a su lista (base da datos) sus pokemons favoritos pulsando el botón agregar. Al traerme esa función he tenido que importar previamente jwtDecode y el token (estado token) por lo que he tenido que declarar dentro de la función, además de las props, el estado token y setToken. A su vez, el estado token está asociado al setToken (el otro estado) que para que no esté vacío debo crear el useEffects, la función getTokenLocalStorage y la constante TOKEN, respectivamente. Es decir, tengo que ir trayéndome aquí todos los datos que voy a ir necesitando.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PokeCard(props) {\n  _s();\n\n  const {\n    pokemon\n  } = props;\n  const [token, setToken] = useState(null);\n  const TOKEN = \"token\";\n  useEffect(() => {\n    getTokenLocalStorage();\n  });\n\n  const getTokenLocalStorage = () => {\n    setToken(localStorage.getItem(TOKEN));\n  }; //Guardar mis pokemons favoritos\n\n\n  const newPokemon = pokemonID => {\n    const decodeUser = jwtDecode(token);\n    const userID = decodeUser.user.id;\n    axios.post(`http://localhost:4000/pokemon/${userID}/${pokemonID}`, {}).then(response => {\n      console.log(response);\n    });\n    Swal.fire({\n      icon: \"success\",\n      title: \"Pokemon añadido a tu lista!!\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n  };\n\n  const bull = /*#__PURE__*/_jsxDEV(Box, {\n    component: \"span\",\n    sx: {\n      display: \"inline-block\",\n      mx: \"2px\",\n      transform: \"scale(0.8)\"\n    },\n    children: \"\\u2022\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            fontSize: 14\n          },\n          color: \"text.secondary\",\n          gutterBottom: true,\n          children: [\"Id: \", pokemon.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          children: [\"Tu\", bull, \"pokemon\", bull, \"favorito\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mb: 1.5\n          },\n          color: \"text.secondary\",\n          children: [\"Mi peso es: \", pokemon.weight]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Me llamo: \", pokemon.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          onClick: () => newPokemon(pokemon.id),\n          children: \"Agr\\xE9game a tu lista\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PokeHijo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"---------------------------\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PokeCard, \"SSLzquenZQzOMzU62DrezfOo2pU=\");\n\n_c = PokeCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokeCard\");","map":{"version":3,"sources":["/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/components/PokeCard/PokeCard.js"],"names":["React","PokeHijo","useEffect","useState","axios","jwtDecode","Box","Card","CardActions","CardContent","Button","Typography","Swal","PokeCard","props","pokemon","token","setToken","TOKEN","getTokenLocalStorage","localStorage","getItem","newPokemon","pokemonID","decodeUser","userID","user","id","post","then","response","console","log","fire","icon","title","showConfirmButton","timer","bull","display","mx","transform","fontSize","mb","weight","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PokeHijo from \"./PokeHijo\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Swal from \"sweetalert2\";\n\n//Este componente es llamado desde App.js, por tanto, en App.js se mostrará todo lo que contenga este componente en su return. Además, en este componente se llama al componente PokeHijo por lo que todo lo que contenga dicho componente también aparecerá en App.js pasando de hijo a padre.\n//En App.js se muestran los botones Descubre pokemons, cerrar sesión, este componente (pokecard) y la frase del token (bien o mal). En este componente, he llamado a las props de pokemon (es decir, toda la información de los pokemons) que las recojo entre paréntesis y en la constante pokemon. Después, me he traido la función newPokemon para que el usuario logueado añada a su lista (base da datos) sus pokemons favoritos pulsando el botón agregar. Al traerme esa función he tenido que importar previamente jwtDecode y el token (estado token) por lo que he tenido que declarar dentro de la función, además de las props, el estado token y setToken. A su vez, el estado token está asociado al setToken (el otro estado) que para que no esté vacío debo crear el useEffects, la función getTokenLocalStorage y la constante TOKEN, respectivamente. Es decir, tengo que ir trayéndome aquí todos los datos que voy a ir necesitando.\nexport default function PokeCard(props) {\n  const { pokemon } = props;\n  const [token, setToken] = useState(null);\n  const TOKEN = \"token\";\n\n  useEffect(() => {\n    getTokenLocalStorage();\n  });\n\n  const getTokenLocalStorage = () => {\n    setToken(localStorage.getItem(TOKEN));\n  };\n  //Guardar mis pokemons favoritos\n  const newPokemon = (pokemonID) => {\n    const decodeUser = jwtDecode(token);\n    const userID = decodeUser.user.id;\n    axios\n      .post(`http://localhost:4000/pokemon/${userID}/${pokemonID}`, {})\n      .then((response) => {\n        console.log(response);\n      });\n\n    Swal.fire({\n      icon: \"success\",\n      title: \"Pokemon añadido a tu lista!!\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n  };\n\n  const bull = (\n    <Box\n      component=\"span\"\n      sx={{ display: \"inline-block\", mx: \"2px\", transform: \"scale(0.8)\" }}\n    >\n      •\n    </Box>\n  );\n\n  return (\n    <div>\n      {/*  <div key={pokemon.id}>\n        <p>Nombre: {pokemon.name}</p>\n        <p>Peso: {pokemon.weight}</p>\n        <button onClick={() => newPokemon(pokemon.id)}>Agregar pokemon</button>\n      </div> */}\n      {/* <PokeHijo /> */}\n      <React.Fragment>\n        <CardContent>\n          <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n            Id: {pokemon.id}\n          </Typography>\n          <Typography variant=\"h5\" component=\"div\">\n            Tu{bull}pokemon{bull}favorito\n          </Typography>\n          <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n            Mi peso es: {pokemon.weight}\n          </Typography>\n          <Typography variant=\"body2\">Me llamo: {pokemon.name}</Typography>\n        </CardContent>\n        <CardActions>\n          <Button size=\"small\" onClick={() => newPokemon(pokemon.id)}>\n            Agrégame a tu lista\n          </Button>\n        </CardActions>\n      </React.Fragment>\n      <PokeHijo />\n      <p>---------------------------</p>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}