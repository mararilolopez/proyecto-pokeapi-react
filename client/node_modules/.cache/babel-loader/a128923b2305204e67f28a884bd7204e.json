{"ast":null,"code":"var _jsxFileName = \"/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport UserContext from \"./context/UserContext\";\nimport { getPokemons, getPokemonData } from \"./services/api\";\nimport PokeCard from \"./components/PokeCard\";\nimport RegisterForm from \"./components/Auth/RegisterForm/RegisterForm\";\nimport LoginForm from \"./components/Auth/LoginForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [trigerPokedex, setTrigerPokedex] = useState(true);\n  const [pokemons, setPokemons] = useState([]);\n  const [decodeToken, setDecodeToken] = useState({});\n  const [token, setToken] = useState(null);\n  const [showLogin, setShowLogin] = useState(true);\n  console.log(trigerPokedex);\n  useEffect(() => {\n    fetchPokemons();\n    getTokenLocalStorage();\n  }, [trigerPokedex]);\n\n  const fetchPokemons = async () => {\n    try {\n      const data = await getPokemons();\n      const promises = data.results.map(async pokemon => {\n        return await getPokemonData(pokemon.url);\n      });\n      const result = await Promise.all(promises);\n      setPokemons(result);\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Simulamos que traemos informaciÃ³n del usuario\n\n\n  const userData = {\n    username: \"Ricardo\",\n    school: \"Socratech\",\n    year: 2021\n  }; // Register user\n\n  /*   const newUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/saveUser\", {\n        name: \"Pocha\",\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        console.log(response);\n      });\n  }; */\n\n  const TOKEN = \"token\"; // Login user\n\n  /*   const loginUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/login\", {\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        setDecodeToken(jwtDecode(response.data.token));\n        console.log(jwtDecode(response.data.token));\n        localStorage.setItem(TOKEN, response.data.token);\n        setToken(localStorage.getItem(TOKEN));\n      });\n  }; */\n\n  const getTokenLocalStorage = () => {\n    setToken(localStorage.getItem(TOKEN));\n  };\n\n  const logout = () => {\n    localStorage.removeItem(TOKEN);\n    setToken(null);\n  }; //localhost:4000/pokemon/:user_id/:pokemon_id\n  // Guardar pokemon por usuario\n\n\n  const newPokemon = pokemonID => {\n    const decodeUser = jwtDecode(token);\n    const userID = decodeUser.user.id;\n    axios.post(`http://localhost:4000/pokemon/${userID}/${pokemonID}`, {}).then(response => {\n      console.log(response);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: userData,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTrigerPokedex(!trigerPokedex),\n        children: \"Descubre Pokemones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: newUser,\n        children: \"Crear usuarios\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loginUser,\n        children: \"Login usuarios\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logout,\n        children: \"Cerrar sesi\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), pokemons.map((pokemon, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: pokemon.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => newPokemon(pokemon.id),\n            children: \"Agregar pokemon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(PokeCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), token ? \"Bieeeeeeeeen, te has registrado correctamente!\" : \"Mal\", showLogin ? /*#__PURE__*/_jsxDEV(LoginForm, {\n        setShowLogin: setShowLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(RegisterForm, {\n        setShowLogin: setShowLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"c8H0/M67FXW8fV0zsEbpe3v+dVQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/App.js"],"names":["useEffect","useState","axios","jwtDecode","UserContext","getPokemons","getPokemonData","PokeCard","RegisterForm","LoginForm","App","trigerPokedex","setTrigerPokedex","pokemons","setPokemons","decodeToken","setDecodeToken","token","setToken","showLogin","setShowLogin","console","log","fetchPokemons","getTokenLocalStorage","data","promises","results","map","pokemon","url","result","Promise","all","error","userData","username","school","year","TOKEN","localStorage","getItem","logout","removeItem","newPokemon","pokemonID","decodeUser","userID","user","id","post","then","response","newUser","loginUser","idx","name"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport UserContext from \"./context/UserContext\";\nimport { getPokemons, getPokemonData } from \"./services/api\";\nimport PokeCard from \"./components/PokeCard\";\nimport RegisterForm from \"./components/Auth/RegisterForm/RegisterForm\";\nimport LoginForm from \"./components/Auth/LoginForm\";\n\nfunction App() {\n  const [trigerPokedex, setTrigerPokedex] = useState(true);\n  const [pokemons, setPokemons] = useState([]);\n  const [decodeToken, setDecodeToken] = useState({});\n  const [token, setToken] = useState(null);\n  const [showLogin, setShowLogin] = useState(true);\n  console.log(trigerPokedex);\n\n  useEffect(() => {\n    fetchPokemons();\n    getTokenLocalStorage();\n  }, [trigerPokedex]);\n\n  const fetchPokemons = async () => {\n    try {\n      const data = await getPokemons();\n      const promises = data.results.map(async (pokemon) => {\n        return await getPokemonData(pokemon.url);\n      });\n      const result = await Promise.all(promises);\n      setPokemons(result);\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  // Simulamos que traemos informaciÃ³n del usuario\n  const userData = {\n    username: \"Ricardo\",\n    school: \"Socratech\",\n    year: 2021,\n  };\n  // Register user\n  /*   const newUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/saveUser\", {\n        name: \"Pocha\",\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        console.log(response);\n      });\n  }; */\n\n  const TOKEN = \"token\";\n  // Login user\n  /*   const loginUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/login\", {\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        setDecodeToken(jwtDecode(response.data.token));\n        console.log(jwtDecode(response.data.token));\n        localStorage.setItem(TOKEN, response.data.token);\n        setToken(localStorage.getItem(TOKEN));\n      });\n  }; */\n\n  const getTokenLocalStorage = () => {\n    setToken(localStorage.getItem(TOKEN));\n  };\n\n  const logout = () => {\n    localStorage.removeItem(TOKEN);\n    setToken(null);\n  };\n\n  //localhost:4000/pokemon/:user_id/:pokemon_id\n\n  // Guardar pokemon por usuario\n  const newPokemon = (pokemonID) => {\n    const decodeUser = jwtDecode(token);\n    const userID = decodeUser.user.id;\n    axios\n      .post(`http://localhost:4000/pokemon/${userID}/${pokemonID}`, {})\n      .then((response) => {\n        console.log(response);\n      });\n  };\n\n  return (\n    <UserContext.Provider value={userData}>\n      <div className=\"App\">\n        <button onClick={() => setTrigerPokedex(!trigerPokedex)}>\n          Descubre Pokemones\n        </button>\n        <button onClick={newUser}>Crear usuarios</button>\n        <button onClick={loginUser}>Login usuarios</button>\n        <button onClick={logout}>Cerrar sesiÃ³n</button>\n\n        {pokemons.map((pokemon, idx) => {\n          return (\n            <div key={idx}>\n              <p>{pokemon.name}</p>\n              <button onClick={() => newPokemon(pokemon.id)}>\n                Agregar pokemon\n              </button>\n            </div>\n          );\n        })}\n\n        <PokeCard />\n        {token ? \"Bieeeeeeeeen, te has registrado correctamente!\" : \"Mal\"}\n        {showLogin ? (\n          <LoginForm setShowLogin={setShowLogin} />\n        ) : (\n          <RegisterForm setShowLogin={setShowLogin} />\n        )}\n      </div>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}