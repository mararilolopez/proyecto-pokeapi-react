{"ast":null,"code":"var _jsxFileName = \"/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport UserContext from \"./context/UserContext\"; //Vinculación con la hoja de estilo app.scss\n\nimport \"./scss/app.scss\"; //Conexión API\n\nimport { getPokemons, getPokemonData } from \"./services/api\"; //Componentes\n\nimport PokeCard from \"./components/PokeCard\";\nimport RegisterForm from \"./components/Auth/RegisterForm/RegisterForm\";\nimport LoginForm from \"./components/Auth/LoginForm\";\nimport Header from \"./components/Header/Header\";\nimport HeaderGenerico from \"./components/Header/HeaderGenerico\";\nimport MisPokemons from \"./components/MisPokemons/MisPokemons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [trigerPokedex, setTrigerPokedex] = useState(true);\n  const [pokemons, setPokemons] = useState([]);\n  const [user, setUser] = useState([]);\n  const [decodeToken, setDecodeToken] = useState({});\n  const [token, setToken] = useState(null); //Creo un estado cuyo valor inicial para showLogin es true y su setEstado es setShowLogin y en el return de App.js creo una ternaria en la que llamo a los componentes LoginForm y RegisterForm. LoginForm si showLogin es verdadero y RegisterForm si es falso. Dichos componentes utilizan el estado setShowLogin declarado aquí en App.js. En cada componente hijo (LoginForm y RegisterForm) declaro una constante de setShowLogin cuyas props es true o false y en cada hijo hago una función handleInput que se ejecutará cuando haya algún cambio en el cualquier input del formulario y una función handleSubmit que se ejecuta cuando se envía el formulario. En el RegisterForm en el momento que envías el formulario de refistro el setShowLogin se pone en true. Además, tras el formulario de registro se muestra la opción de que el usuario se loguee si está registrado ya cuyo setShowLogin también será true. Por su parte, en el LoginForm al enviar el formulario (handleSubmit) se guarda el token con el user_name y el password. Y en este componente solo declaramos setShowLogin como falso en caso de que no esté registrado el usuario al pinchar en el botón regístrate.\n  //El setShowLogin no tiene contenido gráfico/visual como tal, solo es un estado cuyo valor es true o false y dependiendo de dicho valor llamará a través de la ternaria al component RegisterForm o LoginForm.\n\n  const [showLogin, setShowLogin] = useState(true);\n  useEffect(() => {\n    fetchPokemons();\n    getTokenLocalStorage();\n    getUserLocalStorage();\n  }, [trigerPokedex]);\n\n  const fetchPokemons = async () => {\n    try {\n      const data = await getPokemons();\n      const promises = data.results.map(async pokemon => {\n        return await getPokemonData(pokemon.url);\n      });\n      const result = await Promise.all(promises);\n      setPokemons(result);\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Simulamos que traemos información del usuario\n\n\n  const userData = {\n    username: \"Ricardo\",\n    school: \"Socratech\",\n    year: 2021\n  }; // Register user\n\n  /*   const newUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/saveUser\", {\n        name: \"Pocha\",\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        console.log(response);\n      });\n  }; */\n\n  const TOKEN = \"token\"; // Login user\n  //Esta función conecta a través de axios la ruta post de login en la que el usuario introduce su user_name y su password y tras loguearse se ejecuta el .then que es un proceso \"automático\" que hay que hacer así en el que se codifica el token con jwtDecode, se muestra por pantalla, se recoge en el logalStorage la palabra token y el token propiamente dicho y se setea en el localStorage.\n\n  /*   const loginUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/login\", {\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        setDecodeToken(jwtDecode(response.data.token));\n        console.log(jwtDecode(response.data.token));\n        localStorage.setItem(TOKEN, response.data.token);\n        setToken(localStorage.getItem(TOKEN));\n      });\n  }; */\n  //Esta función reconoce el logueo de un usuario mientras no cierre sesión. Su token seguirá en el localStorage hasta que no se desloguee.\n\n  const getTokenLocalStorage = () => {\n    setToken(localStorage.getItem(TOKEN));\n  };\n\n  const getUserLocalStorage = () => {\n    console.log(token);\n    showLogin ? setUser(jwtDecode(localStorage.getItem(TOKEN)).user) : setUser(null);\n  }; //Esta función es para que el usuario se desloguee\n\n\n  const logout = () => {\n    localStorage.removeItem(TOKEN);\n    setToken(null);\n  };\n\n  console.log(user); //localhost:4000/pokemon/:user_id/:pokemon_id\n  // Guardar pokemon por usuario\n\n  /* SE PUEDE ELIMINAR POR QWUE LA USAMOS POKECARD*/\n\n  /* const newPokemon = (pokemonID) => {\n    const decodeUser = jwtDecode(token);\n    const userID = decodeUser.user.id;\n    axios\n      .post(`http://localhost:4000/pokemon/${userID}/${pokemonID}`, {})\n      .then((response) => {\n        console.log(response);\n      });\n  }; */\n  //Esto ya es la \"vista\" que se muestra al usuario con el \"html\" (jsx)\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: userData,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [token ? /*#__PURE__*/_jsxDEV(Header, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 18\n      }, this) : /*#__PURE__*/_jsxDEV(HeaderGenerico, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 43\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"botones\",\n        onClick: () => setTrigerPokedex(!trigerPokedex),\n        children: \"Descubre Pokemones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"---------------------------\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), token ? \"Bieeeeeeeeen, te has registrado correctamente!\" : \"Mal, no te has registrado correctamente\", pokemons.map((pokemon, idx) => {\n        return (\n          /*#__PURE__*/\n\n          /*  <div key={idx}>\n            <p>Nombre: {pokemon.name}</p>\n            <p>Peso: {pokemon.weight}</p>\n            <button onClick={() => newPokemon(pokemon.id)}>\n              Agregar pokemon\n            </button>\n          </div> */\n          _jsxDEV(PokeCard, {\n            pokemon: pokemon\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)\n        );\n      }), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"---------------------------\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), showLogin ? /*#__PURE__*/_jsxDEV(LoginForm, {\n        setShowLogin: setShowLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(RegisterForm, {\n        setShowLogin: setShowLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"GxAIZ0A50siBIbjaQmP7DF5QNi0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/App.js"],"names":["useEffect","useState","axios","jwtDecode","UserContext","getPokemons","getPokemonData","PokeCard","RegisterForm","LoginForm","Header","HeaderGenerico","MisPokemons","App","trigerPokedex","setTrigerPokedex","pokemons","setPokemons","user","setUser","decodeToken","setDecodeToken","token","setToken","showLogin","setShowLogin","fetchPokemons","getTokenLocalStorage","getUserLocalStorage","data","promises","results","map","pokemon","url","result","Promise","all","console","log","error","userData","username","school","year","TOKEN","localStorage","getItem","logout","removeItem","idx"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport UserContext from \"./context/UserContext\";\n\n//Vinculación con la hoja de estilo app.scss\nimport \"./scss/app.scss\";\n\n//Conexión API\nimport { getPokemons, getPokemonData } from \"./services/api\";\n\n//Componentes\nimport PokeCard from \"./components/PokeCard\";\nimport RegisterForm from \"./components/Auth/RegisterForm/RegisterForm\";\nimport LoginForm from \"./components/Auth/LoginForm\";\nimport Header from \"./components/Header/Header\";\nimport HeaderGenerico from \"./components/Header/HeaderGenerico\";\nimport MisPokemons from \"./components/MisPokemons/MisPokemons\";\n\nfunction App() {\n  const [trigerPokedex, setTrigerPokedex] = useState(true);\n  const [pokemons, setPokemons] = useState([]);\n  const [user, setUser] = useState([]);\n  const [decodeToken, setDecodeToken] = useState({});\n  const [token, setToken] = useState(null);\n  //Creo un estado cuyo valor inicial para showLogin es true y su setEstado es setShowLogin y en el return de App.js creo una ternaria en la que llamo a los componentes LoginForm y RegisterForm. LoginForm si showLogin es verdadero y RegisterForm si es falso. Dichos componentes utilizan el estado setShowLogin declarado aquí en App.js. En cada componente hijo (LoginForm y RegisterForm) declaro una constante de setShowLogin cuyas props es true o false y en cada hijo hago una función handleInput que se ejecutará cuando haya algún cambio en el cualquier input del formulario y una función handleSubmit que se ejecuta cuando se envía el formulario. En el RegisterForm en el momento que envías el formulario de refistro el setShowLogin se pone en true. Además, tras el formulario de registro se muestra la opción de que el usuario se loguee si está registrado ya cuyo setShowLogin también será true. Por su parte, en el LoginForm al enviar el formulario (handleSubmit) se guarda el token con el user_name y el password. Y en este componente solo declaramos setShowLogin como falso en caso de que no esté registrado el usuario al pinchar en el botón regístrate.\n  //El setShowLogin no tiene contenido gráfico/visual como tal, solo es un estado cuyo valor es true o false y dependiendo de dicho valor llamará a través de la ternaria al component RegisterForm o LoginForm.\n  const [showLogin, setShowLogin] = useState(true);\n\n  useEffect(() => {\n    fetchPokemons();\n    getTokenLocalStorage();\n    getUserLocalStorage();\n  }, [trigerPokedex]);\n\n  const fetchPokemons = async () => {\n    try {\n      const data = await getPokemons();\n      const promises = data.results.map(async (pokemon) => {\n        return await getPokemonData(pokemon.url);\n      });\n      const result = await Promise.all(promises);\n      setPokemons(result);\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  // Simulamos que traemos información del usuario\n  const userData = {\n    username: \"Ricardo\",\n    school: \"Socratech\",\n    year: 2021,\n  };\n  // Register user\n  /*   const newUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/saveUser\", {\n        name: \"Pocha\",\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        console.log(response);\n      });\n  }; */\n\n  const TOKEN = \"token\";\n  // Login user\n  //Esta función conecta a través de axios la ruta post de login en la que el usuario introduce su user_name y su password y tras loguearse se ejecuta el .then que es un proceso \"automático\" que hay que hacer así en el que se codifica el token con jwtDecode, se muestra por pantalla, se recoge en el logalStorage la palabra token y el token propiamente dicho y se setea en el localStorage.\n\n  /*   const loginUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/login\", {\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        setDecodeToken(jwtDecode(response.data.token));\n        console.log(jwtDecode(response.data.token));\n        localStorage.setItem(TOKEN, response.data.token);\n        setToken(localStorage.getItem(TOKEN));\n      });\n  }; */\n\n  //Esta función reconoce el logueo de un usuario mientras no cierre sesión. Su token seguirá en el localStorage hasta que no se desloguee.\n  const getTokenLocalStorage = () => {\n    setToken(localStorage.getItem(TOKEN));\n  };\n  const getUserLocalStorage = () => {\n    console.log(token);\n    showLogin\n      ? setUser(jwtDecode(localStorage.getItem(TOKEN)).user)\n      : setUser(null);\n  };\n\n  //Esta función es para que el usuario se desloguee\n  const logout = () => {\n    localStorage.removeItem(TOKEN);\n    setToken(null);\n  };\n  console.log(user);\n\n  //localhost:4000/pokemon/:user_id/:pokemon_id\n\n  // Guardar pokemon por usuario\n  /* SE PUEDE ELIMINAR POR QWUE LA USAMOS POKECARD*/\n  /* const newPokemon = (pokemonID) => {\n    const decodeUser = jwtDecode(token);\n    const userID = decodeUser.user.id;\n    axios\n      .post(`http://localhost:4000/pokemon/${userID}/${pokemonID}`, {})\n      .then((response) => {\n        console.log(response);\n      });\n  }; */\n  //Esto ya es la \"vista\" que se muestra al usuario con el \"html\" (jsx)\n  return (\n    <UserContext.Provider value={userData}>\n      <div className=\"App\">\n        {token ? <Header user={user} /> : <HeaderGenerico />}\n        <button\n          className=\"botones\"\n          onClick={() => setTrigerPokedex(!trigerPokedex)}\n        >\n          Descubre Pokemones\n        </button>\n        <p>---------------------------</p>\n        {token\n          ? \"Bieeeeeeeeen, te has registrado correctamente!\"\n          : \"Mal, no te has registrado correctamente\"}\n        {pokemons.map((pokemon, idx) => {\n          return (\n            /*  <div key={idx}>\n              <p>Nombre: {pokemon.name}</p>\n              <p>Peso: {pokemon.weight}</p>\n              <button onClick={() => newPokemon(pokemon.id)}>\n                Agregar pokemon\n              </button>\n            </div> */\n            <PokeCard key={idx} pokemon={pokemon} />\n          );\n        })}\n        {/* {showLogin ? (\n          <MisPokemons setShowLogin={setShowLogin} />\n        ) : (\n          \"No tienes poquemos, registrate\"\n        )} */}\n        <p>---------------------------</p>\n\n        {showLogin ? (\n          <LoginForm setShowLogin={setShowLogin} />\n        ) : (\n          <RegisterForm setShowLogin={setShowLogin} />\n        )}\n      </div>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}