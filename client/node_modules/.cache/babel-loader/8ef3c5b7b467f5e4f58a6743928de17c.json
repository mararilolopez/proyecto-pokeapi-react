{"ast":null,"code":"var _jsxFileName = \"/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/components/Auth/RegisterForm/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\"; //Creo un component function (rfc) en el que creo un estado para newUser (con su respectivo setNewUser) y en el estado inicial hago el destructuring de los datos que me traigo del usuario de la base de datos. Además, creo una función para aplicarla en el onChange del cuestionario (llamada handleInput). La función se va a aplicar cada vez que haya un cambio en el input del formulario.\n//En la función llamo al \"evento\" (cuando el usuario escribe en el input ya se produce un evento, es una acción como hacer click en un botón, por ejemplo) siendo e (el dato entre paréntesis) la información que recojo de cualquiera de los tres input del formulario. En el momento en el que React detecta un cambio en alguno de los tres input (onChange) ejecuta la función y dentro de la función creo una constante que recogerá los name de los input y otra que recogerá los value de los tres input. e.target.name lo que está es cogiendo el name de los input del cuestionario del target del evento (el target es información intríseca que contiene el evento). e.target.value hace lo mismo pero con el value de los input. El name de los input corresponde a \"name\", \"user_name\" y \"password\" respectivamente, al igual que sus values que varía según el input del que se trate.\n//Tras recoger el name y el value del input en el que se ha producido el cambio, steo el NewUser. Para ello, me traigo todo el newUser (...newUser) y recojo solo los datos que varían que son el nameInput y el valueInput. Concretamente, indico a React que el nameInput toma el valueInput.\n//A continuación, hago un onSubmit en el fomrulario que ejecuta una función llamada handleSubmit que también creo en mi component RegisterForm.\n//De esta forma, toda la información recibida en el onChange del nuevo usuario quedará seteada en el handleSubmit al pinchar en el botón correspondiente. En esta función le decimos al evento que espere y que no varíe (preventDefault) y después hago una promesa llamando a la ruta post para guardar un nuevo usuario y cuando tenga dicha información mostrará por pantalla dicha información (response). En esta función el registro de usuario lo hemos hecho dinámico ya que cada input toma el valor de su correspondiente información del newUser. Al usar el axios debo importarlo en el RegisterForm.js.\n//A continuación, en App.js importo el component RegisterForm. Después, lo declaro en el return de App.js.\n//En RegisterForm.js creo un botón en el formulario tipo submit para el registro y en index.js exporto el component RegisterForm.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RegisterForm() {\n  _s();\n\n  const [newUser, setNewUser] = useState({\n    name: \"\",\n    user_name: \"\",\n    password: \"\"\n  });\n\n  const handleInput = e => {\n    console.log(e);\n    console.log(e.target);\n    const nameInput = e.target.name;\n    const valueInput = e.target.value;\n    setNewUser({ ...newUser,\n      [nameInput]: valueInput\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    try {\n      axios.post(\"http://localhost:4000/users/saveUser\", {\n        name: newsUser.name,\n        user_name: newUser.user_name,\n        password: newUser.password\n      }).then(response => {\n        console.log(response);\n      });\n    } catch (error) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reg\\xEDstrate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Nombre:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        value: newUser.name,\n        onChange: handleInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Username:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user_name\",\n        name: \"user_name\",\n        value: newUser.user_name,\n        onChange: handleInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Contrase\\xF1a:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        name: \"password\",\n        value: newUser.password,\n        onChange: handleInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Registrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(RegisterForm, \"otf5dgfioy/UTwV7/BqT2BxVWbU=\");\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/components/Auth/RegisterForm/RegisterForm.js"],"names":["React","useState","axios","RegisterForm","newUser","setNewUser","name","user_name","password","handleInput","e","console","log","target","nameInput","valueInput","value","handleSubmit","preventDefault","post","newsUser","then","response","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC;AACrCK,IAAAA,IAAI,EAAE,EAD+B;AAErCC,IAAAA,SAAS,EAAE,EAF0B;AAGrCC,IAAAA,QAAQ,EAAE;AAH2B,GAAD,CAAtC;;AAMA,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAd;AACA,UAAMC,SAAS,GAAGJ,CAAC,CAACG,MAAF,CAASP,IAA3B;AACA,UAAMS,UAAU,GAAGL,CAAC,CAACG,MAAF,CAASG,KAA5B;AACAX,IAAAA,UAAU,CAAC,EAAE,GAAGD,OAAL;AAAc,OAACU,SAAD,GAAaC;AAA3B,KAAD,CAAV;AACD,GAND;;AAQA,QAAME,YAAY,GAAIP,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACQ,cAAF;;AACA,QAAI;AACFhB,MAAAA,KAAK,CACFiB,IADH,CACQ,sCADR,EACgD;AAC5Cb,QAAAA,IAAI,EAAEc,QAAQ,CAACd,IAD6B;AAE5CC,QAAAA,SAAS,EAAEH,OAAO,CAACG,SAFyB;AAG5CC,QAAAA,QAAQ,EAAEJ,OAAO,CAACI;AAH0B,OADhD,EAMGa,IANH,CAMSC,QAAD,IAAc;AAClBX,QAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACD,OARH;AASD,KAVD,CAUE,OAAOC,KAAP,EAAc,CAAE;AACnB,GAbD;;AAeA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAEN,YAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,KAAK,EAAEb,OAAO,CAACE,IAJjB;AAKE,QAAA,QAAQ,EAAEG;AALZ;AAAA;AAAA;AAAA;AAAA,cAFF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,WAFL;AAGE,QAAA,IAAI,EAAC,WAHP;AAIE,QAAA,KAAK,EAAEL,OAAO,CAACG,SAJjB;AAKE,QAAA,QAAQ,EAAEE;AALZ;AAAA;AAAA;AAAA;AAAA,cAXF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eAoBE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,KAAK,EAAEL,OAAO,CAACI,QAJjB;AAKE,QAAA,QAAQ,EAAEC;AALZ;AAAA;AAAA;AAAA;AAAA,cApBF,eA2BE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAkCD;;GAhEuBN,Y;;KAAAA,Y","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\n//Creo un component function (rfc) en el que creo un estado para newUser (con su respectivo setNewUser) y en el estado inicial hago el destructuring de los datos que me traigo del usuario de la base de datos. Además, creo una función para aplicarla en el onChange del cuestionario (llamada handleInput). La función se va a aplicar cada vez que haya un cambio en el input del formulario.\n//En la función llamo al \"evento\" (cuando el usuario escribe en el input ya se produce un evento, es una acción como hacer click en un botón, por ejemplo) siendo e (el dato entre paréntesis) la información que recojo de cualquiera de los tres input del formulario. En el momento en el que React detecta un cambio en alguno de los tres input (onChange) ejecuta la función y dentro de la función creo una constante que recogerá los name de los input y otra que recogerá los value de los tres input. e.target.name lo que está es cogiendo el name de los input del cuestionario del target del evento (el target es información intríseca que contiene el evento). e.target.value hace lo mismo pero con el value de los input. El name de los input corresponde a \"name\", \"user_name\" y \"password\" respectivamente, al igual que sus values que varía según el input del que se trate.\n//Tras recoger el name y el value del input en el que se ha producido el cambio, steo el NewUser. Para ello, me traigo todo el newUser (...newUser) y recojo solo los datos que varían que son el nameInput y el valueInput. Concretamente, indico a React que el nameInput toma el valueInput.\n//A continuación, hago un onSubmit en el fomrulario que ejecuta una función llamada handleSubmit que también creo en mi component RegisterForm.\n//De esta forma, toda la información recibida en el onChange del nuevo usuario quedará seteada en el handleSubmit al pinchar en el botón correspondiente. En esta función le decimos al evento que espere y que no varíe (preventDefault) y después hago una promesa llamando a la ruta post para guardar un nuevo usuario y cuando tenga dicha información mostrará por pantalla dicha información (response). En esta función el registro de usuario lo hemos hecho dinámico ya que cada input toma el valor de su correspondiente información del newUser. Al usar el axios debo importarlo en el RegisterForm.js.\n//A continuación, en App.js importo el component RegisterForm. Después, lo declaro en el return de App.js.\n//En RegisterForm.js creo un botón en el formulario tipo submit para el registro y en index.js exporto el component RegisterForm.\nexport default function RegisterForm() {\n  const [newUser, setNewUser] = useState({\n    name: \"\",\n    user_name: \"\",\n    password: \"\",\n  });\n\n  const handleInput = (e) => {\n    console.log(e);\n    console.log(e.target);\n    const nameInput = e.target.name;\n    const valueInput = e.target.value;\n    setNewUser({ ...newUser, [nameInput]: valueInput });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    try {\n      axios\n        .post(\"http://localhost:4000/users/saveUser\", {\n          name: newsUser.name,\n          user_name: newUser.user_name,\n          password: newUser.password,\n        })\n        .then((response) => {\n          console.log(response);\n        });\n    } catch (error) {}\n  };\n\n  return (\n    <>\n      <h2>Regístrate</h2>\n      <form onSubmit={handleSubmit}>\n        <label>Nombre:</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          value={newUser.name}\n          onChange={handleInput}\n        />\n\n        <label>Username:</label>\n        <input\n          type=\"text\"\n          id=\"user_name\"\n          name=\"user_name\"\n          value={newUser.user_name}\n          onChange={handleInput}\n        />\n\n        <label>Contraseña:</label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          value={newUser.password}\n          onChange={handleInput}\n        />\n        <button type=\"submit\">Registrar</button>\n      </form>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}