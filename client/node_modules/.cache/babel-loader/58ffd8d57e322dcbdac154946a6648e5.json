{"ast":null,"code":"var _jsxFileName = \"/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/components/Auth/RegisterForm/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\"; //Creo un component function (rfc) en el que creo un estado para newUser (con su respectivo setNewUser) y en el estado inicial hago el destructuring de los datos que me traigo del usuario de la base de datos. Además, creo una función para aplicarla en el onChange del cuestionario (llamada handleInput). La función se va a aplicar cada vez que haya un cambio en el input del formulario.\n//En la función llamo al \"evento\" (cuando el usuario escribe en el input ya se produce un evento, es una acción como hacer click en un botón, por ejemplo) siendo e (el dato entre paréntesis) la información que recojo de cualquiera de los tres input del formulario. En el momento en el que React detecta un cambio en alguno de los tres input (onChange) ejecuta la función y dentro de la función creo una constante que recogerá los name de los input y otra que recogerá los value de los tres input. e.target.name lo que está es cogiendo el name de los input del cuestionario del target del evento (el target es información intríseca que contiene el evento). e.target.value hace lo mismo pero con el value de los input. El name de los input corresponde a \"name\", \"user_name\" y \"password\" respectivamente, al igual que sus values que varía según el input del que se trate.\n//Tras recoger el name y el value del input en el que se ha producido el cambio, steo el NewUser. Para ello, me traigo todo el newUser (...newUser) y recojo solo los datos que varían que son el nameInput y el valueInput. Concretamente, indico a React que el nameInput toma el valueInput.\n//A continuación, hago un onSubmit en el fomrulario que ejecuta una función llamada handleSubmit que también creo en mi component RegisterForm.\n//De esta forma, toda la información recibida en el onChange del nuevo usuario quedará seteada en el handleSubmit al pinchar en el botón correspondiente. En esta función le decimos al evento que espere y que no varíe (preventDefault) y después hago una promesa llamando a la ruta post para guardar un nuevo usuario y cuando tenga dicha información mostrará por pantalla dicha información (response). En esta función el registro de usuario lo hemos hecho dinámico ya que cada input toma el valor de su correspondiente información del newUser. Al usar el axios debo importarlo en el RegisterForm.js.\n//A continuación, en App.js importo el component RegisterForm. Después, lo declaro en el return de App.js.\n//En RegisterForm.js creo un botón en el formulario tipo submit para el registro y en index.js exporto el component RegisterForm. Para que en los input no se queden grabados los datos introducidos por el usuario, en la función handleSubmit creamos el \"objeto\" con el nombre, apellido y password vacío en el then de la función con el setNewUser.\n//A continuación, hacemos el formulario de login cuando el usuario ya está registrado. Para ello, creamos un nuevo componente en la carpeta Auth que se llama LoginForm con su archivo js correspondiente y su index.js.\n//En el index.js de LoginForm exporto el componente LoginForm. Después, en el LoginForm creo un component function con un estado newUser y setNewUser cuyo estado inicial es el \"objeto\" con los strings vacíos y después creo una función handleInput y handleSubmit que irán vinculadas a cada uno de los input del formulario. La primera de ellas que coge el valor introducido en cada input por el usuario y la segunda que guarda dicha información. La primera función se vincula a ambos input del formulario y la segunda función a la etiqueta form directamente.\n//Para la función handleSubmit copiamos el código de la función loginUser de App.js y modifico los datos del usuario que habíamos creado de forma que el nombre y el password sean dinámicos. En el .then de esta función modificamos algo el código tal como se puede ver abajo (incluidos los input vacíos para que no se queden en el formulario tras completarlo el usuario). No debemos olvidarnos de importar axios en LoginForm al usarlo en esta función.\n//Para que al loguearse varíe la \"vista\" del usuario, nos vamos a app.js y creamos un nuevo estado dentro de la function app llamado showLogin y setShowLogin cuyo valor inicial será true porque suponemos que el usuario está registrado. A continuación, importamos en app.js el component LoginForm. Tras importarlo, en el return de app.js, creo una ternaria en la que indico que si el usuario se loguea correctamente se muestre el componente LoginForm (es decir, el formulario de login) y si no se loguea correctamente, se muestre el componente RegisterForm (es decir, el formulario de registro).\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RegisterForm() {\n  _s();\n\n  const [newUser, setNewUser] = useState({\n    name: \"\",\n    user_name: \"\",\n    password: \"\"\n  });\n\n  const handleInput = e => {\n    const nameInput = e.target.name;\n    const valueInput = e.target.value;\n    setNewUser({ ...newUser,\n      [nameInput]: valueInput\n    });\n  };\n\n  const handleSubmit = e => {\n    console.log(e);\n    e.preventDefault();\n\n    try {\n      axios.post(\"http://localhost:4000/users/saveUser\", {\n        name: newUser.name,\n        user_name: newUser.user_name,\n        password: newUser.password\n      }).then(response => {\n        console.log(response);\n        setNewUser({\n          name: \"\",\n          user_name: \"\",\n          password: \"\"\n        });\n      });\n    } catch (error) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reg\\xEDstrate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Nombre:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        value: newUser.name,\n        onChange: handleInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Username:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user_name\",\n        name: \"user_name\",\n        value: newUser.user_name,\n        onChange: handleInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Contrase\\xF1a:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        name: \"password\",\n        value: newUser.password,\n        onChange: handleInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Registrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(RegisterForm, \"otf5dgfioy/UTwV7/BqT2BxVWbU=\");\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/components/Auth/RegisterForm/RegisterForm.js"],"names":["React","useState","axios","RegisterForm","newUser","setNewUser","name","user_name","password","handleInput","e","nameInput","target","valueInput","value","handleSubmit","console","log","preventDefault","post","then","response","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC;AACrCK,IAAAA,IAAI,EAAE,EAD+B;AAErCC,IAAAA,SAAS,EAAE,EAF0B;AAGrCC,IAAAA,QAAQ,EAAE;AAH2B,GAAD,CAAtC;;AAMA,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACzB,UAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASN,IAA3B;AACA,UAAMO,UAAU,GAAGH,CAAC,CAACE,MAAF,CAASE,KAA5B;AACAT,IAAAA,UAAU,CAAC,EAAE,GAAGD,OAAL;AAAc,OAACO,SAAD,GAAaE;AAA3B,KAAD,CAAV;AACD,GAJD;;AAMA,QAAME,YAAY,GAAIL,CAAD,IAAO;AAC1BM,IAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ;AACAA,IAAAA,CAAC,CAACQ,cAAF;;AACA,QAAI;AACFhB,MAAAA,KAAK,CACFiB,IADH,CACQ,sCADR,EACgD;AAC5Cb,QAAAA,IAAI,EAAEF,OAAO,CAACE,IAD8B;AAE5CC,QAAAA,SAAS,EAAEH,OAAO,CAACG,SAFyB;AAG5CC,QAAAA,QAAQ,EAAEJ,OAAO,CAACI;AAH0B,OADhD,EAMGY,IANH,CAMSC,QAAD,IAAc;AAClBL,QAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AACAhB,QAAAA,UAAU,CAAC;AACTC,UAAAA,IAAI,EAAE,EADG;AAETC,UAAAA,SAAS,EAAE,EAFF;AAGTC,UAAAA,QAAQ,EAAE;AAHD,SAAD,CAAV;AAKD,OAbH;AAcD,KAfD,CAeE,OAAOc,KAAP,EAAc,CAAE;AACnB,GAnBD;;AAqBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAEP,YAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,KAAK,EAAEX,OAAO,CAACE,IAJjB;AAKE,QAAA,QAAQ,EAAEG;AALZ;AAAA;AAAA;AAAA;AAAA,cAFF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,WAFL;AAGE,QAAA,IAAI,EAAC,WAHP;AAIE,QAAA,KAAK,EAAEL,OAAO,CAACG,SAJjB;AAKE,QAAA,QAAQ,EAAEE;AALZ;AAAA;AAAA;AAAA;AAAA,cAXF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eAoBE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,KAAK,EAAEL,OAAO,CAACI,QAJjB;AAKE,QAAA,QAAQ,EAAEC;AALZ;AAAA;AAAA;AAAA;AAAA,cApBF,eA2BE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAkCD;;GApEuBN,Y;;KAAAA,Y","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\n//Creo un component function (rfc) en el que creo un estado para newUser (con su respectivo setNewUser) y en el estado inicial hago el destructuring de los datos que me traigo del usuario de la base de datos. Además, creo una función para aplicarla en el onChange del cuestionario (llamada handleInput). La función se va a aplicar cada vez que haya un cambio en el input del formulario.\n//En la función llamo al \"evento\" (cuando el usuario escribe en el input ya se produce un evento, es una acción como hacer click en un botón, por ejemplo) siendo e (el dato entre paréntesis) la información que recojo de cualquiera de los tres input del formulario. En el momento en el que React detecta un cambio en alguno de los tres input (onChange) ejecuta la función y dentro de la función creo una constante que recogerá los name de los input y otra que recogerá los value de los tres input. e.target.name lo que está es cogiendo el name de los input del cuestionario del target del evento (el target es información intríseca que contiene el evento). e.target.value hace lo mismo pero con el value de los input. El name de los input corresponde a \"name\", \"user_name\" y \"password\" respectivamente, al igual que sus values que varía según el input del que se trate.\n//Tras recoger el name y el value del input en el que se ha producido el cambio, steo el NewUser. Para ello, me traigo todo el newUser (...newUser) y recojo solo los datos que varían que son el nameInput y el valueInput. Concretamente, indico a React que el nameInput toma el valueInput.\n//A continuación, hago un onSubmit en el fomrulario que ejecuta una función llamada handleSubmit que también creo en mi component RegisterForm.\n//De esta forma, toda la información recibida en el onChange del nuevo usuario quedará seteada en el handleSubmit al pinchar en el botón correspondiente. En esta función le decimos al evento que espere y que no varíe (preventDefault) y después hago una promesa llamando a la ruta post para guardar un nuevo usuario y cuando tenga dicha información mostrará por pantalla dicha información (response). En esta función el registro de usuario lo hemos hecho dinámico ya que cada input toma el valor de su correspondiente información del newUser. Al usar el axios debo importarlo en el RegisterForm.js.\n//A continuación, en App.js importo el component RegisterForm. Después, lo declaro en el return de App.js.\n//En RegisterForm.js creo un botón en el formulario tipo submit para el registro y en index.js exporto el component RegisterForm. Para que en los input no se queden grabados los datos introducidos por el usuario, en la función handleSubmit creamos el \"objeto\" con el nombre, apellido y password vacío en el then de la función con el setNewUser.\n//A continuación, hacemos el formulario de login cuando el usuario ya está registrado. Para ello, creamos un nuevo componente en la carpeta Auth que se llama LoginForm con su archivo js correspondiente y su index.js.\n//En el index.js de LoginForm exporto el componente LoginForm. Después, en el LoginForm creo un component function con un estado newUser y setNewUser cuyo estado inicial es el \"objeto\" con los strings vacíos y después creo una función handleInput y handleSubmit que irán vinculadas a cada uno de los input del formulario. La primera de ellas que coge el valor introducido en cada input por el usuario y la segunda que guarda dicha información. La primera función se vincula a ambos input del formulario y la segunda función a la etiqueta form directamente.\n//Para la función handleSubmit copiamos el código de la función loginUser de App.js y modifico los datos del usuario que habíamos creado de forma que el nombre y el password sean dinámicos. En el .then de esta función modificamos algo el código tal como se puede ver abajo (incluidos los input vacíos para que no se queden en el formulario tras completarlo el usuario). No debemos olvidarnos de importar axios en LoginForm al usarlo en esta función.\n//Para que al loguearse varíe la \"vista\" del usuario, nos vamos a app.js y creamos un nuevo estado dentro de la function app llamado showLogin y setShowLogin cuyo valor inicial será true porque suponemos que el usuario está registrado. A continuación, importamos en app.js el component LoginForm. Tras importarlo, en el return de app.js, creo una ternaria en la que indico que si el usuario se loguea correctamente se muestre el componente LoginForm (es decir, el formulario de login) y si no se loguea correctamente, se muestre el componente RegisterForm (es decir, el formulario de registro).\nexport default function RegisterForm() {\n  const [newUser, setNewUser] = useState({\n    name: \"\",\n    user_name: \"\",\n    password: \"\",\n  });\n\n  const handleInput = (e) => {\n    const nameInput = e.target.name;\n    const valueInput = e.target.value;\n    setNewUser({ ...newUser, [nameInput]: valueInput });\n  };\n\n  const handleSubmit = (e) => {\n    console.log(e);\n    e.preventDefault();\n    try {\n      axios\n        .post(\"http://localhost:4000/users/saveUser\", {\n          name: newUser.name,\n          user_name: newUser.user_name,\n          password: newUser.password,\n        })\n        .then((response) => {\n          console.log(response);\n          setNewUser({\n            name: \"\",\n            user_name: \"\",\n            password: \"\",\n          });\n        });\n    } catch (error) {}\n  };\n\n  return (\n    <>\n      <h2>Regístrate</h2>\n      <form onSubmit={handleSubmit}>\n        <label>Nombre:</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          value={newUser.name}\n          onChange={handleInput}\n        />\n\n        <label>Username:</label>\n        <input\n          type=\"text\"\n          id=\"user_name\"\n          name=\"user_name\"\n          value={newUser.user_name}\n          onChange={handleInput}\n        />\n\n        <label>Contraseña:</label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          value={newUser.password}\n          onChange={handleInput}\n        />\n        <button type=\"submit\">Registrar</button>\n      </form>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}