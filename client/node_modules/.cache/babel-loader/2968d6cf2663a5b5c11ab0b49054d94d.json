{"ast":null,"code":"var _jsxFileName = \"/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport UserContext from \"./context/UserContext\"; //Conexión API\n\nimport { getPokemons, getPokemonData } from \"./services/api\"; //Componentes\n\nimport PokeCard from \"./components/PokeCard\";\nimport RegisterForm from \"./components/Auth/RegisterForm/RegisterForm\";\nimport LoginForm from \"./components/Auth/LoginForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [trigerPokedex, setTrigerPokedex] = useState(true);\n  const [pokemons, setPokemons] = useState([]);\n  const [decodeToken, setDecodeToken] = useState({});\n  const [token, setToken] = useState(null);\n  const [showLogin, setShowLogin] = useState(true);\n  console.log(trigerPokedex);\n  useEffect(() => {\n    fetchPokemons();\n    getTokenLocalStorage();\n  }, [trigerPokedex]);\n\n  const fetchPokemons = async () => {\n    try {\n      const data = await getPokemons();\n      const promises = data.results.map(async pokemon => {\n        return await getPokemonData(pokemon.url);\n      });\n      const result = await Promise.all(promises);\n      setPokemons(result);\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Simulamos que traemos información del usuario\n\n\n  const userData = {\n    username: \"Ricardo\",\n    school: \"Socratech\",\n    year: 2021\n  }; // Register user\n\n  /*   const newUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/saveUser\", {\n        name: \"Pocha\",\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        console.log(response);\n      });\n  }; */\n\n  const TOKEN = \"token\"; // Login user\n  //Esta función conecta a través de axios la ruta post de login en la que el usuario introduce su user_name y su password y tras loguearse se ejecuta el .then que es un proceso \"automático\" que hay que hacer así en el que se codifica el token con jwtDecode, se muestra por pantalla, se recoge en el logalStorage la palabra token y el token propiamente dicho y se setea en el localStorage.\n\n  /*   const loginUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/login\", {\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        setDecodeToken(jwtDecode(response.data.token));\n        console.log(jwtDecode(response.data.token));\n        localStorage.setItem(TOKEN, response.data.token);\n        setToken(localStorage.getItem(TOKEN));\n      });\n  }; */\n  //Esta función reconoce el logueo de un usuario mientras no cierre sesión. Su token seguirá en el localStorage hasta que no se desloguee.\n\n  const getTokenLocalStorage = () => {\n    setToken(localStorage.getItem(TOKEN));\n  }; //Esta función es para que el usuario se desloguee\n\n\n  const logout = () => {\n    localStorage.removeItem(TOKEN);\n    setToken(null);\n  }; //localhost:4000/pokemon/:user_id/:pokemon_id\n  // Guardar pokemon por usuario\n\n\n  const newPokemon = pokemonID => {\n    const decodeUser = jwtDecode(token);\n    const userID = decodeUser.user.id;\n    axios.post(`http://localhost:4000/pokemon/${userID}/${pokemonID}`, {}).then(response => {\n      console.log(response);\n    });\n  }; //Esto ya es la \"vista\" que se muestra al usuario con el \"html\" (jsx)\n\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: userData,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTrigerPokedex(!trigerPokedex),\n        children: \"Descubre Pokemones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logout,\n        children: \"Cerrar sesi\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), pokemons.map((pokemon, idx) => {\n        return (\n          /*#__PURE__*/\n\n          /*  <div key={idx}>\n            <p>Nombre: {pokemon.name}</p>\n            <p>Peso: {pokemon.weight}</p>\n            <button onClick={() => newPokemon(pokemon.id)}>\n              Agregar pokemon\n            </button>\n          </div> */\n          _jsxDEV(PokeCard, {\n            pokemon: pokemon\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        );\n      }), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"---------------------------\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), token ? \"Bieeeeeeeeen, te has registrado correctamente!\" : \"Mal, no te has registrado correctamente\", showLogin ? /*#__PURE__*/_jsxDEV(LoginForm, {\n        setShowLogin: setShowLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(RegisterForm, {\n        setShowLogin: setShowLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"c8H0/M67FXW8fV0zsEbpe3v+dVQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/juanrosales/Desktop/Proyecto-Navidad-React/pocratech/client/src/App.js"],"names":["useEffect","useState","axios","jwtDecode","UserContext","getPokemons","getPokemonData","PokeCard","RegisterForm","LoginForm","App","trigerPokedex","setTrigerPokedex","pokemons","setPokemons","decodeToken","setDecodeToken","token","setToken","showLogin","setShowLogin","console","log","fetchPokemons","getTokenLocalStorage","data","promises","results","map","pokemon","url","result","Promise","all","error","userData","username","school","year","TOKEN","localStorage","getItem","logout","removeItem","newPokemon","pokemonID","decodeUser","userID","user","id","post","then","response","idx"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport UserContext from \"./context/UserContext\";\n\n//Conexión API\nimport { getPokemons, getPokemonData } from \"./services/api\";\n\n//Componentes\nimport PokeCard from \"./components/PokeCard\";\nimport RegisterForm from \"./components/Auth/RegisterForm/RegisterForm\";\nimport LoginForm from \"./components/Auth/LoginForm\";\n\nfunction App() {\n  const [trigerPokedex, setTrigerPokedex] = useState(true);\n  const [pokemons, setPokemons] = useState([]);\n  const [decodeToken, setDecodeToken] = useState({});\n  const [token, setToken] = useState(null);\n  const [showLogin, setShowLogin] = useState(true);\n  console.log(trigerPokedex);\n\n  useEffect(() => {\n    fetchPokemons();\n    getTokenLocalStorage();\n  }, [trigerPokedex]);\n\n  const fetchPokemons = async () => {\n    try {\n      const data = await getPokemons();\n      const promises = data.results.map(async (pokemon) => {\n        return await getPokemonData(pokemon.url);\n      });\n      const result = await Promise.all(promises);\n      setPokemons(result);\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  // Simulamos que traemos información del usuario\n  const userData = {\n    username: \"Ricardo\",\n    school: \"Socratech\",\n    year: 2021,\n  };\n  // Register user\n  /*   const newUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/saveUser\", {\n        name: \"Pocha\",\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        console.log(response);\n      });\n  }; */\n\n  const TOKEN = \"token\";\n  // Login user\n  //Esta función conecta a través de axios la ruta post de login en la que el usuario introduce su user_name y su password y tras loguearse se ejecuta el .then que es un proceso \"automático\" que hay que hacer así en el que se codifica el token con jwtDecode, se muestra por pantalla, se recoge en el logalStorage la palabra token y el token propiamente dicho y se setea en el localStorage.\n\n  /*   const loginUser = () => {\n    axios\n      .post(\"http://localhost:4000/users/login\", {\n        user_name: \"pochita\",\n        password: \"123\",\n      })\n      .then((response) => {\n        setDecodeToken(jwtDecode(response.data.token));\n        console.log(jwtDecode(response.data.token));\n        localStorage.setItem(TOKEN, response.data.token);\n        setToken(localStorage.getItem(TOKEN));\n      });\n  }; */\n\n  //Esta función reconoce el logueo de un usuario mientras no cierre sesión. Su token seguirá en el localStorage hasta que no se desloguee.\n  const getTokenLocalStorage = () => {\n    setToken(localStorage.getItem(TOKEN));\n  };\n\n  //Esta función es para que el usuario se desloguee\n  const logout = () => {\n    localStorage.removeItem(TOKEN);\n    setToken(null);\n  };\n\n  //localhost:4000/pokemon/:user_id/:pokemon_id\n\n  // Guardar pokemon por usuario\n  const newPokemon = (pokemonID) => {\n    const decodeUser = jwtDecode(token);\n    const userID = decodeUser.user.id;\n    axios\n      .post(`http://localhost:4000/pokemon/${userID}/${pokemonID}`, {})\n      .then((response) => {\n        console.log(response);\n      });\n  };\n\n  //Esto ya es la \"vista\" que se muestra al usuario con el \"html\" (jsx)\n  return (\n    <UserContext.Provider value={userData}>\n      <div className=\"App\">\n        <button onClick={() => setTrigerPokedex(!trigerPokedex)}>\n          Descubre Pokemones\n        </button>\n        {/*        <button onClick={newUser}>Crear usuarios</button>\n        <button onClick={loginUser}>Login usuarios</button> */}\n        <button onClick={logout}>Cerrar sesión</button>\n\n        {pokemons.map((pokemon, idx) => {\n          return (\n            /*  <div key={idx}>\n              <p>Nombre: {pokemon.name}</p>\n              <p>Peso: {pokemon.weight}</p>\n              <button onClick={() => newPokemon(pokemon.id)}>\n                Agregar pokemon\n              </button>\n            </div> */\n            <PokeCard key={idx} pokemon={pokemon} />\n          );\n        })}\n\n        <p>---------------------------</p>\n\n        {token\n          ? \"Bieeeeeeeeen, te has registrado correctamente!\"\n          : \"Mal, no te has registrado correctamente\"}\n        {showLogin ? (\n          <LoginForm setShowLogin={setShowLogin} />\n        ) : (\n          <RegisterForm setShowLogin={setShowLogin} />\n        )}\n      </div>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}